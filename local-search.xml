<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>民间文学之意义</title>
    <link href="/2022/10/23/hello-world/"/>
    <url>/2022/10/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>民间文学是民众口头创作、口头传承的文学，具有口头性、集体性、传承性、变异性等四大特征，其中口头性是最核心的特征。跟作家的书面创作、书本传播相比，口头创作和传播是众人共同参与的过程，每一次讲述（或讲唱）都是一种创新，每一次表演都是一种再创作。每个人都可以加入表演队伍，在表演中加入自己的经验、情感和想象。所以，我们说民间文学是一个在表演中不断汲取新思想的开放的意义系统。正因为如此，民间文学能够建构社会记忆，成为体现社会记忆的标杆。</p><h2 id="社会记忆"><a href="#社会记忆" class="headerlink" title="社会记忆"></a>社会记忆</h2><h3 id="社会记忆之阐释"><a href="#社会记忆之阐释" class="headerlink" title="社会记忆之阐释"></a>社会记忆之阐释</h3><p>“社会记忆”最早为法国社会心理学家莫里斯·哈布瓦赫所使用。他认为一个人的记忆从来都不是个人的特别定制，而是产生于集体交流的过程中，个人只能在集体的、社会的框架内进行回忆。关于个体记忆与集体记忆的关系，他说：“个体通过把自己置于群体的位置来进行回忆，但也可以确信，群体的记忆是通过个体记忆来实现的，并且在个体记忆之中体现自身。”（哈布瓦赫《论集体记忆》，毕然、郭金华译，上海人民出版社2002年版）集体记忆的本质是立足当下需要而对过去的回忆。集体记忆总是根据某种当下观念、利益和要求对过去进行重构。也正是在这个意义上，集体记忆也被哈布瓦赫称作社会记忆。与哈布瓦赫同时代的阿拜·瓦尔堡也曾使用“社会记忆”这个概念，并讨论了人类“回忆共同体”的问题。20世纪后期，记忆研究进入新的阶段，学者们不再满足于讨论集体如何决定个体的回忆，转而探讨整个社会如何记忆。哈拉尔德·韦尔策将社会记忆定义为“一个大我群体的全体成员的社会经验的总和”（韦尔策《社会记忆》，季斌等译，北京大学出版社2007年版）。</p><h3 id="社会记忆之传承"><a href="#社会记忆之传承" class="headerlink" title="社会记忆之传承"></a>社会记忆之传承</h3><p>实际上，社会记忆不仅应当下需要而产生，也承接来自古代的经验。德国的扬·阿斯曼集中讨论了跨世代、长时段传承的“文化记忆”问题。他认为，文化记忆在文字产生以前主要依赖口头讲述、仪式活动传达信仰和价值观，保持文化的一致性；文字产生以后主要依靠传习文本，特别是阐释经典文本，保持民族文化的一致性。他称前者为“仪式一致性”，后者为“文本一致性”。每个民族都有自己的文化记忆，这是保持一个民族的基本特性、维护内部成员相互认同的根基。阿斯曼指出：“民族认同及其稳定持久性是受制于文化记忆及其组织形式的。民族的消亡（除了印加帝国这种极特殊例子），不是有形物质的消失，而是在集体、文化层面上的遗忘。”（阿斯曼《文化记忆》，金寿福、黄晓晨译，北京大学出版社2015年版）因而，维持一个民族共同的文化记忆，对于维系民族的生存活力具有重要意义。文化记忆从古代延续到当代，也参与到对当下社会记忆的建构，并呈现出当代的意识形态和价值认同。</p><h2 id="民间文学与当下社会意义建构"><a href="#民间文学与当下社会意义建构" class="headerlink" title="民间文学与当下社会意义建构"></a>民间文学与当下社会意义建构</h2><p>古老的神话被当代社会征用，在新时代发挥新的记忆功能，也为新时代作出新的贡献。今天追述中国悠久的历史，我们常说“自从盘古开天地，三皇五帝到于今”，是通过引用古代神话来表达的。我们称中国是“华夏”“九州”“赤县神州”，其来源于上古流传、至今仍口头讲述的神话，包括尧舜神话，特别是大禹治水神话。我们自称是“炎黄子孙”，源于我们经常把自己的姓氏追溯到上古神话中的炎帝、黄帝。有人说中华民族是“龙的传人”，也跟我国几千年来的龙神话、龙崇拜密切相关。伏羲、女娲、西王母、夸父、嫦娥、嫘祖、仓颉等神话，至今仍为人们所讲述，也不断为人们所征用，并被赋予新的意义。中国的探月航天器以嫦娥命名，有一种中文输入法叫“仓颉输入法”，这些都是用相关神话人物命名的。中国古老神话至今仍在被讲述和引用，为我们今天的生活服务。今天我们讨论中国在发展过程中取得的光辉成就和面临的各种问题，征用古老神话营造共同的历史氛围，构建共同的社会记忆，从而增强中华民族共同体的相互认同感和凝聚力。可以看出，神话在国家团结、社会和谐方面发挥着十分重要的作用。</p><p>民间传说也在当代语境下参与社会记忆建构。1950年中华人民共和国推出了新的婚姻法，为宣传婚姻自主、反对包办婚姻，著名民间传说梁山伯与祝英台被改编成越剧《梁祝抗婚》，宣传青年男女追求婚姻自由的正当性。这部戏曲的演出反过来影响民间口头讲述，在此后搜集整理的梁祝传说各种文本中，反对包办婚姻、反抗邪恶势力、追求爱情自主成为富有时代特征的故事情节。后来，此传说与牛郎织女、孟姜女、白蛇等传说一道被归入“中国四大民间传说”，它们都表达了追求爱情自主、反抗封建压迫的思想。古老而优美的传说体现了新时代的思想内涵，成为一个时代社会记忆的载体。再如，在上海流行的黄道婆传说中，黄道婆原本是一位善于种植、加工、纺织棉花的农妇，但在“工人阶级领导一切”的话语环境中，她的身份发生了较大变化，被塑造成纺织女工、纺织技术革新家。同时，在20世纪50年代提倡民族团结的大背景下，她从海南归来，因而被演绎成向黎族人民学习纺织技艺的民族文化传播使者、民族团结典范。后来在阶级斗争观念作用下，她又被描述成从小就受尽欺压的童养媳，为反抗封建家庭的压迫而离家出走，来到海南。学成技艺后，她返回上海乌泥泾，向家乡人民传播技艺，还改良纺织工具，体现出工人阶级勇于创新的精神。20世纪90年代在“科学技术是第一生产力”的口号下，黄道婆又被描述成科学家。可以看出，新涌现的传说构建了新的社会记忆，因而在历史悠久的传说人物身上总是映现出当代的社会价值观。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/10/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="一、进程"><a href="#一、进程" class="headerlink" title="一、进程"></a>一、进程</h2><h3 id="1、进程的基本概念"><a href="#1、进程的基本概念" class="headerlink" title="1、进程的基本概念"></a>1、进程的基本概念</h3><p>(1)<em><strong>进程和程序是相辅相成的</strong></em>。程序是进程的组成部分之一，一个进程的运行目标是执行它 所对应的程序，如果没有程序，进程就失去了其存在的意义。<em><strong>一个程序也可以由多个进程组成</strong></em>。</p><p>(2)进程是一个动态概念，而程序则是一个静态概念。程序是指令的有序集合，其本身没有任何运行的含义，是一个<strong>静态</strong>的概念。进程是程序在处理机上的一次执行过程，它是一个<strong>动态</strong>的概念，动态地产生、执行，然后消亡。因此进程的存在也是暂时的。</p><p>(3)<em><strong>进程具有并行性特征</strong></em>，而程序则没有。进程具有并行特征的两个方面:独立性和异步性。 独立性是指，进程是一个相对完整的资源分配单位。异步性是指，每个进程按照各自独立的、不可预知的速度向前推进。显然程序不反映执行过程，所以不具有并行性。</p><h3 id="2、进程的描述"><a href="#2、进程的描述" class="headerlink" title="2、进程的描述"></a>2、进程的描述</h3><p>进程由 3 部分组成，也就是<em>进程控制块</em>(Process Control Block，<em>PCB</em>)、<em>有关的程序段</em>以及<em>操作的数据集</em>。</p><p>系统为每个进程设置一个 PCB，它是标识和描述进程存在及相关特性的数据块，是进程 <em>存在的唯一标识</em>，是进程动态特征的集中反映。当创建一个进程时，系统首先创建其 PCB，然后 根据 PCB 中的信息对进程实施有效的管理和控制。当一个进程完成其功能之后，系统则释放 PCB，进程也随之消亡。进程控制块的具体内容随操作系统的不同而有所区别，但主要都应当 包括以下信息。</p><p>(1)<em><strong>进程标识</strong></em>。每个进程都有系统<em>唯一</em>的进程名称或标识号。在识别一个进程时，进程名或 标识号就代表该进程。</p><p>(2)<em><strong>状态信息</strong></em>。指明进程当前所处的状态，作为进程调度、分配处理机的依据。进程在活动 期间有 3 种基本的状态，可分为就绪状态、执行状态和等待状态。一个进程在任一时刻只能具有这 三种状态中的一种。执行状态表示该进程当前占有处理机，正在处理机上调度执行;就绪状态表示 该进程已经得到了除处理机之外的全部资源，准备占有处理机;等待状态则表示进程因某种原因(等 待某事件发生)而暂时不能占有处理机。当然在具体的系统中，为了最大可能地提高资源的利用率， 可能会引进或者进一步细分某些状态。</p><p>(3)<em><strong>进程的优先级</strong></em>。进程优先级是选取进程占有处理机的重要依据，一般根据进程的轻重缓 急程度为进程指定一个优先级，包括静态或者动态的优先级。</p><p>(4)<em><strong>CPU 现场信息</strong></em>。当进程状态变化时(例如一个进程放弃使用处理机)，它需要将当时的 CPU 现场保护到内存中，以便再次占用处理机时恢复正常运行。包括各种通用寄存器、程序计数 器、程序状态字等。</p><p>(5)<em><strong>资源清单</strong></em>。每个进程在运行时，除了需要内存外，还需要其他资源，如 I&#x2F;O 设备、外存、 数据区等。</p><p>(6)<em><strong>队列指针</strong></em>。用于将处于同一状态或者具有家族关系的进程链接成一个队列，在该单元中 存放下一进程 PCB 首地址。</p><p>(7)<em><strong>其他</strong></em>，如计时信息、记账信息、通信信息等。</p><h3 id="3、task-struct"><a href="#3、task-struct" class="headerlink" title="3、task_struct"></a>3、task_struct</h3><p>Linux 中的每个进程都由一个 <em><strong>task_struct</strong></em> 数据结构来表示。task_struct 其实就是通常意义上的 <em><strong>进程控制块</strong></em>，或者称为进程描述符，系统正是通过 task_stmct 结构来<em>对进程进行有效管理和控制的</em>。 当系统创建一个进程时，Linux 为新的进程分配一个 task_stmct 结构，进程结束时，又收回其 task_struct 结构，进程也随之消亡。分配给进程的 task_truct 结构可以被内核中的许多模块(如调 度程序、资源分配程序、中断处理程序等)访问，并常驻于内存。在最新发布的 Linux 4.14 内核中， Linux 为每个新创建的进程动态地分配一个 task_struct 结构，系统所能允许的最大进程数是由机器 所拥有的物理内存的大小决定的，这是对以前版本的改进。</p><p>Linux 支持两种进程:<em>普通进程</em>和<em>实时进程</em>。实时进程具有一定程度上的紧迫性，应该有一个 短的响应时间，更重要的是，这个响应时间应该有很小的变化;而普通进程则没有这种限制。因此， 调度程序需要区别对待这两类进程。</p><p>由于 task_struct 结构包含进程的全部信息，因此有必要来详细分析 task_struct 结构中所包含的 内容，task_struct 结构包含的数据比较庞大，按其功能主要可分为几大部分:进程标识符信息、进 程调度信息、进程间通信信息、时间和定时器信息、进程链接信息、文件系统信息、虚拟内存信息、 处理器特定信息及其他信息。</p><p>(1)进程标识符信息</p><p> 进程标识符信息包括进程标识符、用户标识符、组标识符等一些信息。每个进程都有一个唯一的进程标识符(Process ID，PID)，内核通过这个标识符来识别不同的进程，同时，进程标识符 也是内核提供给用户程序的接口。PID 是 32 位的无符号整数，存放在进程描述符的 PID 域中，它 被顺序编号，新创建进程的 PID 通常是前一个进程的 PID 加 1，为了与 16 位硬件平台的传统 UNIX 系统保持兼容，Linux 上允许的最大 PID 号是 32767。当内核在系统中创建第 32768 个进程时，就 必须重新开始使用闲置的 PID 号。</p><p>此外，每个进程都属于某个用户和某个用户组。进程描述符中定义了多种类别的用户标识符 和组标识符，比如用户标识符(uid)、有效用户标识符(euid)以及组标识符(gid)、有效组标 识符(egid)等。这些也都是简单的数字，主要用于系统的安全控制。</p><p>(2)进程调度信息 </p><p>调度程序利用这些信息来决定系统中哪个进程最迫切需要运行，并釆用适当的策略来保证系统运转的公平性和高效性。这些信息主要包括调度标志、调度的策略、进程的类别、进程的优先级、 进程状态。其中可能的进程状态有:可运行状态、可中断的等待状态、不可中断的等待状态、暂停 状态和僵死状态。</p><p>(3)进程间通信信息 </p><p>在多任务编程环境中，进程之间必然会发生多种多样的合作、协调等，因此进程之间就必须<br>进行通信，来交换信息和交流数据。Linux 支持多种不同形式的进程间通信机制，如信号、管道， 也支持 System V 进程间通信机制，如信号量、消息队列和共享内存等。进程描述符中主要有这些 域与进程通信相关:sig，信号处理函数，包括自定义的和系统默认的处理函数;blocked，进程所 能接收信号的位掩码;sigmask_lock，信号掩码的自旋锁;semundo，进程信号量的取消操作队列， 进程每操作一次信号量，都生成一个对此次操作的取消操作，这些属于同一进程的取消操作组成一 个链表，当进程异常终止时，内核就会执行取消操作;semsleeping，与信号量相关的等待队列，每 一信号量集合对应一个等待队列。</p><p>(4)进程链接信息</p><p>Linux 系统中所有进程都是相互联系的。除了初始化进程 init 外，其他所有进程都有一个父进<br>程。可以通过 fork 或 clone 系统调用来创建子进程，除了进程标识符(PID)等必要的信息外，子 进程的 task_struct 结构中的绝大部分信息都是从父进程中复制过来的。每个进程对应的 task_struct 结构中都包含有指向其父进程和兄弟进程(具有相同父进程的进程)以及子进程的指针。有了这些 指针，进程之间的通信、协作就更加方便了。进程的 ask_struct 结构中主要有下面这些域记录了进 程间的各种关系。next_task、prev_task 用于链入进程双向链表的前后指针，系统的所有进程组成一 个双向循环链表。p_opptr、p_pptr、p_cptr、p_ysptr、p_osptr 分别表示指向祖先进程、父进程、子 进程、兄弟进程的指针。Pidhash_next、pidhash_pprev 用于链入进程哈希表的前后指针。<br>(5)时间和定时器信息</p><p>内核需要记录进程的创建时间以及在其生命周期中消耗的 CPU 时间。进程耗费的 CPU 时间由<br>两部分组成:一是在用户态(用户模式)下耗费的时间，二是在内核态(内核模式)下耗费的时间。每个时钟滴答，也就是每个时钟中断，内核都要更新当前进程耗费的时间。Linux 支持与进程相关 的多种间隔定时器，包括实时定时器、虛拟定时器和概况定时器。进程可以通过系统调用来设定定 时器，以便在定时器到期后向它发送信号。这些定时器可以是一次性的或者周期性的。</p><p>(6)文件系统信息</p><p>进程经常会访问文件系统资源，打开或者关闭文件，Linux 内核要对进程使用文件的情况进行<br>记录。task_struct 结构中有两个数据结构用于描述进程与文件相关的信息。其中，fs 域是指向 fs_struct 结构的指针，fs_struct 结构中描述了两个 VFS 索引节点，这两个索引节点叫作 root 和 pwd，分 别指向进程的可执行映像所对应的主目录和当前工作目录。files 域用来记录进程打开文件的文 件描述符。</p><p>(7)虚拟内存信息</p><p>Linux 采用按需分页的策略来解决进程的内存需求，当物理内存不足时，Linux 内存管理系统<br>需要把内存中的部分页面交换到外存。每个进程都有自己的虚拟地址空间(内核线程除外)，用 mm_struct 来描述，其中包含一个指向若干个虚存块的虚存队列。另外，Linux 内核还引入了另一 个域 active_mm，它指向活动地址空间，但这一空间并不为该进程所拥有，通常为内核线程所使用。 内核线程与用户进程相比不需要 mm_struct 结构:当用户进程切换到内核线程时，内核线程可以直 接借用进程的页表，无须重新加载独立的页表。内核线程用 active_mm 指针指向所借用进程的 mm_struct 结构。</p><p>(8)处理器特定信息</p><p> 进程可以看作是系统当前执行状态的综合。进程运行时，它将使用处理器的寄存器以及堆栈<br>等。进程被挂起时，进程的上下文，即所有与 CPU 相关的处理机状态必须保存在它的 task_struct 结构中。当进程被调度重新运行时，再从中恢复这些环境，重新设定上下文，也就是恢复这些寄存 器和堆栈的值。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
